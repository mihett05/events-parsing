"""Merge migrations

Revision ID: bac716464e91
Revises: 7caa48a1bab4
Create Date: 2025-05-22 17:32:31.590679

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from alembic_postgresql_enum import TableReference
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'bac716464e91'
down_revision: Union[str, None] = '7caa48a1bab4'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum('SUPER_USER', 'SUPER_OWNER', 'SUPER_ADMIN', 'SUPER_REDACTOR', 'OWNER', 'ADMIN', 'REDACTOR', 'PUBLIC', name='RoleEnum').create(op.get_bind())
    op.create_table('organization_tokens',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.Column('used_by', sa.Integer(), nullable=True),
    sa.Column('is_used', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('fk_organization_tokens_created_by_users'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['used_by'], ['users.id'], name=op.f('fk_organization_tokens_used_by_users'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_organization_tokens'))
    )
    op.create_table('telegram_tokens',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('is_used', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_telegram_tokens_user_id_users'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_telegram_tokens'))
    )
    op.create_table('user_activation_tokens',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('is_used', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_user_activation_tokens_user_id_users'), ondelete='cascade'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_user_activation_tokens'))
    )
    op.create_table('user_organization_role',
    sa.Column('organization_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('role', postgresql.ENUM('SUPER_USER', 'SUPER_OWNER', 'SUPER_ADMIN', 'SUPER_REDACTOR', 'OWNER', 'ADMIN', 'REDACTOR', 'PUBLIC', name='RoleEnum', create_type=False), nullable=False),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name=op.f('fk_user_organization_role_organization_id_organizations'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_user_organization_role_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('organization_id', 'user_id', name=op.f('pk_user_organization_role'))
    )
    op.create_table('event_users',
    sa.Column('event_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['event_id'], ['events.id'], name=op.f('fk_event_users_event_id_events'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_event_users_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('event_id', 'user_id', name=op.f('pk_event_users'))
    )
    op.drop_table('association_table')
    op.drop_constraint('fk_attachments_event_id_events', 'attachments', type_='foreignkey')
    op.drop_constraint('fk_attachments_mail_id_mails', 'attachments', type_='foreignkey')
    op.create_foreign_key(op.f('fk_attachments_event_id_events'), 'attachments', 'events', ['event_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(op.f('fk_attachments_mail_id_mails'), 'attachments', 'mails', ['mail_id'], ['id'], ondelete='SET NULL')
    op.drop_constraint('fk_events_organization_id_organizations', 'events', type_='foreignkey')
    op.create_foreign_key(op.f('fk_events_organization_id_organizations'), 'events', 'organizations', ['organization_id'], ['id'], ondelete='SET NULL')
    op.drop_constraint('fk_mails_event_id_events', 'mails', type_='foreignkey')
    op.create_foreign_key(op.f('fk_mails_event_id_events'), 'mails', 'events', ['event_id'], ['id'], ondelete='SET NULL')
    op.add_column('notifications', sa.Column('event_id', sa.Integer(), nullable=False))
    op.add_column('notifications', sa.Column('send_date', sa.Date(), nullable=False))
    op.create_unique_constraint('unique_notification', 'notifications', ['event_id', 'recipient_id', 'send_date'])
    op.drop_constraint('fk_notifications_recipient_id_users', 'notifications', type_='foreignkey')
    op.create_foreign_key(op.f('fk_notifications_recipient_id_users'), 'notifications', 'users', ['recipient_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('fk_notifications_event_id_events'), 'notifications', 'events', ['event_id'], ['id'])
    op.drop_constraint('fk_organizations_owner_id_users', 'organizations', type_='foreignkey')
    op.create_foreign_key(op.f('fk_organizations_owner_id_users'), 'organizations', 'users', ['owner_id'], ['id'], ondelete='SET DEFAULT')
    sa.Enum('OWNER', 'ADMIN', 'REDACTOR', name='userroleenum').drop(op.get_bind())
    sa.Enum(
        enum_schema='public',
        enum_name='NotificationFormatEnum',
        new_values=['HTML', 'RAW_TEXT', 'MARKDOWN'],
        affected_columns=[TableReference(table_schema='public', table_name='notifications', column_name='format')],
        enum_values_to_rename=[],
    )
    sa.Enum(
        enum_schema='public',
        enum_name='NotificationStatusEnum',
        new_values=['UNSENT', 'SENT', 'FAILED'],
        affected_columns=[TableReference(table_schema='public', table_name='notifications', column_name='status')],
        enum_values_to_rename=[],
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.sync_enum_values(
        enum_schema='public',
        enum_name='NotificationStatusEnum',
        new_values=['SENT', 'UNSENT'],
        affected_columns=[TableReference(table_schema='public', table_name='notifications', column_name='status')],
        enum_values_to_rename=[],
    )
    op.ENUM(
        enum_schema='public',
        enum_name='NotificationFormatEnum',
        new_values=['HTML', 'RAW_TEXT'],
        affected_columns=[TableReference(table_schema='public', table_name='notifications', column_name='format')],
        enum_values_to_rename=[],
    )
    sa.Enum('OWNER', 'ADMIN', 'REDACTOR', name='userroleenum').create(op.get_bind())
    op.drop_constraint(op.f('fk_organizations_owner_id_users'), 'organizations', type_='foreignkey')
    op.create_foreign_key('fk_organizations_owner_id_users', 'organizations', 'users', ['owner_id'], ['id'])
    op.drop_constraint(op.f('fk_notifications_event_id_events'), 'notifications', type_='foreignkey')
    op.drop_constraint(op.f('fk_notifications_recipient_id_users'), 'notifications', type_='foreignkey')
    op.create_foreign_key('fk_notifications_recipient_id_users', 'notifications', 'users', ['recipient_id'], ['id'])
    op.drop_constraint('unique_notification', 'notifications', type_='unique')
    op.drop_column('notifications', 'send_date')
    op.drop_column('notifications', 'event_id')
    op.drop_constraint(op.f('fk_mails_event_id_events'), 'mails', type_='foreignkey')
    op.create_foreign_key('fk_mails_event_id_events', 'mails', 'events', ['event_id'], ['id'])
    op.drop_constraint(op.f('fk_events_organization_id_organizations'), 'events', type_='foreignkey')
    op.create_foreign_key('fk_events_organization_id_organizations', 'events', 'organizations', ['organization_id'], ['id'])
    op.drop_constraint(op.f('fk_attachments_mail_id_mails'), 'attachments', type_='foreignkey')
    op.drop_constraint(op.f('fk_attachments_event_id_events'), 'attachments', type_='foreignkey')
    op.create_foreign_key('fk_attachments_mail_id_mails', 'attachments', 'mails', ['mail_id'], ['id'])
    op.create_foreign_key('fk_attachments_event_id_events', 'attachments', 'events', ['event_id'], ['id'])
    op.create_table('association_table',
    sa.Column('organization_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('role', postgresql.ENUM('OWNER', 'ADMIN', 'REDACTOR', name='userroleenum', create_type=False), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name='fk_association_table_organization_id_organizations'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='fk_association_table_user_id_users')
    )
    op.drop_table('event_users')
    op.drop_table('user_organization_role')
    op.drop_table('user_activation_tokens')
    op.drop_table('telegram_tokens')
    op.drop_table('organization_tokens')
    sa.Enum('SUPER_USER', 'SUPER_OWNER', 'SUPER_ADMIN', 'SUPER_REDACTOR', 'OWNER', 'ADMIN', 'REDACTOR', 'PUBLIC', name='RoleEnum').drop(op.get_bind())
    # ### end Alembic commands ###
