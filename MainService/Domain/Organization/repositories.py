from abc import ABCMeta, abstractmethod

from MainService.Domain.Organization.dtos import CreateOrganizationDto, ReadOrganizationsDto, \
    CreateUserOrganizationRoleDto, ReadUserOrganizationRolesDto
from MainService.Domain.Organization.entities import Organization, UserOrganizationRole


class OrganizationRepository(metaclass=ABCMeta):
    @abstractmethod
    async def create(self, dto: CreateOrganizationDto) -> Organization: ...
    @abstractmethod
    async def read(self, id_: int) -> Organization: ...
    @abstractmethod
    async def read_all(self, dto: ReadOrganizationsDto) -> list[Organization]: ...
    @abstractmethod
    async def update(self, organization: Organization) -> Organization: ...
    @abstractmethod
    async def delete(self, organization: Organization) -> Organization: ...

class UserOrganizationRolesRepository(metaclass=ABCMeta):
    @abstractmethod
    async def create(self, dto: CreateUserOrganizationRoleDto) -> UserOrganizationRole: ...
    @abstractmethod
    async def read(self,id_: int) -> UserOrganizationRole: ...
    @abstractmethod
    async def read_all(self, dto: ReadUserOrganizationRolesDto) -> list[UserOrganizationRole]: ...
    @abstractmethod
    async def update(self, role: UserOrganizationRole) -> UserOrganizationRole: ...
    @abstractmethod
    async def delete(self, role: UserOrganizationRole) -> UserOrganizationRole: ...