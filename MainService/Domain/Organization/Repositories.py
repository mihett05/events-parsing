from abc import ABCMeta, abstractmethod

import MainService.Domain.Organization.Dtos as dtos
import MainService.Domain.Organization.Entities as ent


class OrganizationRepository(metaclass=ABCMeta):
    @abstractmethod
    async def create(self, dto: dtos.CreateOrganizationDto) -> ent.Organization: ...
    @abstractmethod
    async def read(self, id_: int) -> ent.Organization: ...
    @abstractmethod
    async def read_all(self, dto: dtos.ReadOrganizationsDto) -> list[ent.Organization]: ...
    @abstractmethod
    async def update(self, organization: ent.Organization) -> ent.Organization: ...
    @abstractmethod
    async def delete(self, organization: ent.Organization) -> ent.Organization: ...

class UserOrganizationRolesRepository(metaclass=ABCMeta):
    @abstractmethod
    async def create(self, dto: dtos.CreateUserOrganizationRoleDto) -> ent.UserOrganizationRole: ...
    @abstractmethod
    async def read(self,id_: int) -> ent.UserOrganizationRole: ...
    @abstractmethod
    async def read_all(self, dto: dtos.ReadUserOrganizationRolesDto) -> list[ent.UserOrganizationRole]: ...
    @abstractmethod
    async def update(self, role: ent.UserOrganizationRole) -> ent.UserOrganizationRole: ...
    @abstractmethod
    async def delete(self, role: ent.UserOrganizationRole) -> ent.UserOrganizationRole: ...