services:
  postgres:
    image: postgres:17.3
    container_name: postgres
    restart: always

    ports:
      - 5432:5432
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    env_file:
      - main_service/.env

  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"  # Порт для AMQP
      - "15672:15672"  # Порт для веба
    env_file:
      - main_service/.env
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    depends_on:
      - postgres
      - rabbitmq
    links:
      - "postgres:postgres"
      - "rabbitmq:rabbitmq"
    deploy:
      mode: replicated
      replicas: 1
      endpoint_mode: vip
    build:
      context: main_service
      dockerfile: dev/Dockerfile
    env_file:
      - main_service/.env
    ports:
      - 8000:8000

  parser:
    depends_on:
      - backend
      - rabbitmq
    links:
      - "rabbitmq:rabbitmq"
    deploy:
      mode: replicated
      replicas: 1
      endpoint_mode: vip
    build:
      context: parser
      dockerfile: dev/Dockerfile
    env_file:
      - main_service/.env

  adminer:
    links:
      - "postgres:postgres"
    container_name: adminer
    image: adminer
    restart: always
    environment:
      host: localhost
    ports:
      - 8080:8080

volumes:
  postgres-data:
  rabbitmq_data:
